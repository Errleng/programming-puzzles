(defun split-string (string delimiter)
  (loop :for s = (position-if-not delimiter string)
        :then (position-if-not delimiter string :start (+ 1 e))
        :for e = (and s (position-if delimiter string :start s))
        :when s :collect (subseq string s e)
        :while e))
(defun read-array ()
  (let* ((line (read-line))
         (elems (split-string line (lambda (c) (char= c #\Space))))
         (nums (map 'vector 'parse-integer elems)))
    nums))
(defvar memo (make-hash-table))
(defun combine (l r)
  (let ((table-entry (concatenate 'string (write-to-string l) (write-to-string r))))
    (cond
      ((gethash table-entry memo)
       (gethash table-entry memo))
      ((>= l r)
       (setf (gethash table-entry memo) 1))
      (0))))
(defvar N (read))
(print N)
(defvar arr (read-array))
(print arr)
(print "Done")
(print (combine 1 1))
