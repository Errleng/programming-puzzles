/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>

using namespace std;

void print() {
    return;
}

template<typename T, typename... Types>
void print(T var1, Types... var2) {
    cout << var1 << " ";
    print(var2...);
}

void println() {
    cout << endl;
}

template<typename T, typename... Types>
void println(T var1, Types... var2) {
    cout << var1 << " ";
    println(var2...);
}

template<typename T, size_t N>
void print1D(T(&arr)[N]) {
    for (int i = 0; i < N; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

template<typename T, size_t R, size_t C>
void print2D(T(&arr)[R][C]) {
    for (int i = 0; i < R; ++i) {
        for (int j = 0; j < C; ++j) {
            cout << arr[i][j] << " ";
        }
        cout << endl;
    }
}


#include <bits/stdc++.h>

using namespace std;

#define upto(i, s, e, c) for (int(i) = (s); (i) < (e); (i) += c)
#define up(i, e) upto(i, 0, e, 1)
#define upc(i, e, c) upto(i, 0, e, c)
#define dnto(i, s, e, c) for (int(i) = (s); (i) > (e); (i) -= (c))
#define dn(i, s, e) downto(i, s, e, 1);

class dmopc14c2p5 {
public:
    void solve(std::istream& in, std::ostream& out) {
        const int MAXN = 1000;
        vector<int> adj[MAXN];
        vector<int> mills;
        double prob[MAXN] = {0};
        int N, M, a, b;
        in >> N >> M;
        int lake1;
        up(i, M) {
            in >> a >> b;
            a--;
            b--;
            adj[a].push_back(b);
        }
        prob[0] = 1.0;
        up(c, N) {
            double chance = prob[c] / adj[c].size();
            for (int i : adj[c]) {
                prob[i] += chance;
            }
        }
        up (i, N) {
            if (adj[i].size() == 0) {
                printf("%0.9f\n", prob[i]);
            }
        }
    }
};


int main() {
    dmopc14c2p5 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
