(defun split-string (string delimiter)
  (loop :for s = (position-if-not delimiter string)
        :then (position-if-not delimiter string :start (+ 1 e))
        :for e = (and s (position-if delimiter string :start s))
        :when s :collect (subseq string s e)
        :while e))
(defun read-array ()
  (let* ((line (read-line))
         (elems (split-string line (lambda (c) (char= c #\Space))))
         (nums (map 'vector 'parse-integer elems)))
    nums))
(defvar memo (make-hash-table))
(defvar sum-table (make-array N))
(defun range-sum (a b)
  (- (aref sum-table a) (aref sum-table b)))
(defun combine (l r)
  (let ((table-entry (concatenate 'string (write-to-string l) (write-to-string r))))
    (cond
      ((gethash table-entry memo)
       (gethash table-entry memo))
      ((>= l r)
       (setf (gethash table-entry memo) 1))
      (
       (let ((s l) (e r))
         (loop while (< l r)
               do (cond ((> (range-sum s l) (range-sum r e)) (incf l))
                        ((< (range-sum s l) (range-sum r e)) (decf r))
                        ((= (range-sum s l) (range-sum r e))
                              (if (and (combine s l) (combine (+ l 1) (- r 1)) (combine r e))
                                  (setf (gethash table-entry memo) 1))
                              (incf l)
                              (decf r)
                              ))))
               )))
      )
                                        ; (defvar N (read))
(defvar N 7)
(print N)
                                        ; (defvar arr (read-array))
(defvar arr (list 47 12 12 3 9 9 3))
(print arr)
(print "Done")
(print (combine 1 2))
