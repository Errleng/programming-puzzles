#CCC 2016 in Python 3
maximum = 401
sumList = [[-1 for x in range(maximum)] for y in range(maximum)]
riceballList = [0 for x in range(401)]

def solveRange(left, right):
    if sumList[left][right] != -1:
      # print("Occupied Spot", sumList[left][right], left, right)
      return sumList[left][right]
    # else:
      # print("Unoccupied Spot", left, right)
    index = left
    #count = 0
    while index < right:
      if solveRange(left, index) and solveRange(index + 1, right):
          # count += 1
          # print("First Loop:", count)
          if riceballList[index + 1] - riceballList[left] == riceballList[right + 1]  - riceballList[index + 1]:
              sumList[left][right] = True
              return True
      index += 1
    index = left
    # count = 0
    while index < right:
        secondIndex = index
        while secondIndex < right:
            thirdIndex = secondIndex
            while thirdIndex < right:
              if riceballList[secondIndex + 1] - riceballList[left] == riceballList[right + 1] - riceballList[thirdIndex + 1]:
                  # count += 1
                  # print(count, index, secondIndex, thirdIndex, right)
                  if solveRange(left, secondIndex) and solveRange(secondIndex + 1, thirdIndex) and solveRange(thirdIndex + 1, right):
                      sumList[left][right] = True
                      return True
              thirdIndex += 1
            secondIndex += 1
        index += 1
    sumList[left][right] = False
    return False

def S4():
    answer = 0
    riceballNumber = int(input())
    # riceballNumber = int(input())
    # riceballList = [int(x) for x in input().split()]
    # print(len(sumList), len(sumList[0]))
    for i in range(riceballNumber):
        sumList[i][i] = True
    inputList = [int(x) for x in input().split()]
    index = 1
    for i in range(len(inputList)):
        riceballList[index] = inputList[i]
        index += 1
    index = 2
    # print(riceballList)
    while index <= riceballNumber:
        riceballList[index] += riceballList[index - 1]
        index += 1
    # print(riceballList)
    solveRange(0, riceballNumber - 1)
    i = 0
    while i < riceballNumber:
        j = i
        while j < riceballNumber:
            if sumList[i][j]:
                answer = max(answer, riceballList[j + 1] - riceballList[i])
            j += 1
        i += 1
    print(answer)

S4()




#include <bits/stdc++.h>
#include <string>
using namespace std;

//Seeing how it works

#define MAXN 401
int dp[MAXN][MAXN];
int balls[MAXN];

bool solve(int l, int r){
  if (dp[l][r] != -1){
    string value = "False";
    if (dp[l][r] == 1) {
      value = "True";
    }
    // cout << "Occupied spot " << value << " " << l << " " << r << endl;
    return dp[l][r];
  }
  else {
    // cout << "Unoccupied " << l << " " << r << endl;
  }
  // int count = 0;
  for (int i=l;i<r;i++){
    if (solve(l,i)&&solve(i+1,r)){
      // count += 1;
      // cout << "First Loop: " << count << endl;
      if (balls[i+1]-balls[l]==balls[r+1]-balls[i+1]){
        return dp[l][r] = true;
      }
    }
  }
  // count = 0;
  for (int i=l;i<r;i++){
    for (int j=i;j<r;j++){
      for (int k=j;k<r;k++){
        if (balls[j+1]-balls[l]==balls[r+1]-balls[k+1]){
          // count += 1;
          // cout << count << " " << i << " " << j << " " << k << " " << r << endl;
          if (solve(l,j)&&solve(j+1,k)&&solve(k+1,r)){
            return dp[l][r] = true;
          }
        }
      }
    }
  }
  return dp[l][r] = false;
}

int main(){
  int N;
  int ans = 0;
  scanf("%d",&N);
  memset(dp,-1,sizeof dp);
  for (int i=0;i<N;i++){
    dp[i][i] = true;
  }
  for (int i=1;i<=N;i++){
    scanf("%d",&balls[i]);
  }
  for (int i=2;i<=N;i++){
    balls[i] += balls[i-1];
  }
  // for (int i=0; i<MAXN; i++){
  //   cout << balls[i] << " ";
  // }
  // cout << "\n";
  // cout << sizeof(balls)/sizeof(balls[0]) << endl;
  // cout << sizeof(dp)/sizeof(dp[0]) << endl;
  solve(0,N-1);
  for (int i=0;i<N;i++){
    for (int j=i;j<N;j++){
      if (dp[i][j]==true){
        ans = max(ans,balls[j+1]-balls[i]);
      }
    }
  }
  printf("%d",ans);
  return 0;
}
