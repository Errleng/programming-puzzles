/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>

using namespace std;

void print() {
    return;
}

template<typename T, typename... Types>
void print(T var1, Types... var2) {
    cout << var1 << " ";
    print(var2...);
}

void println() {
    cout << endl;
}

template<typename T, typename... Types>
void println(T var1, Types... var2) {
    cout << var1 << " ";
    println(var2...);
}

template<typename T, size_t N>
void print1D(T(&arr)[N]) {
    for (int i = 0; i < N; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

template<typename T, size_t R, size_t C>
void print2D(T(&arr)[R][C]) {
    for (int i = 0; i < R; ++i) {
        for (int j = 0; j < C; ++j) {
            cout << arr[i][j] << " ";
        }
        cout << endl;
    }
}



#include <cstring>

#define INF 0x3f3f3f3f

using namespace std;

class cco07p3 {
public:
    void solve(std::istream &in, std::ostream &out) {
        ios_base::sync_with_stdio(false);
        cin.tie(nullptr);
        in.tie(nullptr);

        int t, n, k, w, range;
        in >> t;
        for (int _ = 0; _ < t; ++_) {
            in >> n >> k >> w;
            range = n+w;

            int scores[n+1];
            memset(scores, 0, sizeof(scores));
            int scoreSums[range+1];
            memset(scoreSums, 0, sizeof(scoreSums));
            int dp[k+1][n+1];
            memset(dp, 0, sizeof(dp));

            for (int i = 1; i <= n; ++i) {
                in >> scores[i];
            }

            for (int i = 1; i <= range; ++i) {
                scoreSums[i] = scoreSums[i-1] + scores[i];
            }

            for (int i = 1; i <= range; ++i) {
                for (int j = 1; j <= range; ++j) {
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
                }
            }
            out << dp[k][n] << endl;
        }
    }
};


int main() {
    cco07p3 solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
